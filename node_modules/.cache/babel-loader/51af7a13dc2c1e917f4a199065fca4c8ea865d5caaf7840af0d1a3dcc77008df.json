{"ast":null,"code":"import { LOGIN_USER_FAILURE, LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS } from \"../actions/action_types\";\nimport axios from \"axios\";\nconst loginSellerAction = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const response = await axios.post(\"http://localhost:1213/seller/login-seller\", {\n      username,\n      password\n    }, config);\n    dispatch({\n      type: LOGIN_USER_SUCCESS,\n      payload: response\n    });\n    console.log(response.data.message);\n    localStorage.setItem(\"userInfo\", JSON.stringify(response.data.message));\n  } catch (error) {\n    console.log(\"Error response from server:\", error);\n    let errorMessage = \"An error occurred\"; // Default error message\n\n    if (error.response && error.response.data.error) {\n      errorMessage = error.response.data.error; // Use the error message from the server if available\n    }\n\n    dispatch({\n      type: LOGIN_USER_FAILURE,\n      payload: errorMessage\n    });\n  }\n};\nexport default loginSellerAction;","map":{"version":3,"names":["LOGIN_USER_FAILURE","LOGIN_USER_REQUEST","LOGIN_USER_SUCCESS","axios","loginSellerAction","email","password","dispatch","type","config","headers","response","post","username","payload","console","log","data","message","localStorage","setItem","JSON","stringify","error","errorMessage"],"sources":["/Users/apple/Documents/Ecommerce/client/src/actions/seller_login_actions.js"],"sourcesContent":["import { LOGIN_USER_FAILURE,LOGIN_USER_REQUEST,LOGIN_USER_SUCCESS } from \"../actions/action_types\";\nimport axios from \"axios\"\n\nconst loginSellerAction= (email,password)=>async(dispatch)=>{\n  try {\n      dispatch({type:LOGIN_USER_REQUEST})\n      const config = {\n        headers:{\n          \"Content-type\":\"application/json\"\n        }\n      }\n\n      const response = await axios.post(\"http://localhost:1213/seller/login-seller\",{username,password},config)\n      dispatch({type:LOGIN_USER_SUCCESS,payload:response})\n      console.log(response.data.message)\n\n      localStorage.setItem(\"userInfo\", JSON.stringify(response.data.message));\n\n  } catch (error) {\n\n  console.log(\"Error response from server:\", error);\n    let errorMessage = \"An error occurred\"; // Default error message\n\n  \n    if (error.response && error.response.data.error) {\n      errorMessage = error.response.data.error; // Use the error message from the server if available\n    }\n\n    dispatch({ type: LOGIN_USER_FAILURE, payload: errorMessage });\n  }\n}\nexport default loginSellerAction;"],"mappings":"AAAA,SAASA,kBAAkB,EAACC,kBAAkB,EAACC,kBAAkB,QAAQ,yBAAyB;AAClG,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,iBAAiB,GAAEA,CAACC,KAAK,EAACC,QAAQ,KAAG,MAAMC,QAAQ,IAAG;EAC1D,IAAI;IACAA,QAAQ,CAAC;MAACC,IAAI,EAACP;IAAkB,CAAC,CAAC;IACnC,MAAMQ,MAAM,GAAG;MACbC,OAAO,EAAC;QACN,cAAc,EAAC;MACjB;IACF,CAAC;IAED,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,2CAA2C,EAAC;MAACC,QAAQ;MAACP;IAAQ,CAAC,EAACG,MAAM,CAAC;IACzGF,QAAQ,CAAC;MAACC,IAAI,EAACN,kBAAkB;MAACY,OAAO,EAACH;IAAQ,CAAC,CAAC;IACpDI,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACM,IAAI,CAACC,OAAO,CAAC;IAElCC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACX,QAAQ,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC;EAE3E,CAAC,CAAC,OAAOK,KAAK,EAAE;IAEhBR,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEO,KAAK,CAAC;IAC/C,IAAIC,YAAY,GAAG,mBAAmB,CAAC,CAAC;;IAGxC,IAAID,KAAK,CAACZ,QAAQ,IAAIY,KAAK,CAACZ,QAAQ,CAACM,IAAI,CAACM,KAAK,EAAE;MAC/CC,YAAY,GAAGD,KAAK,CAACZ,QAAQ,CAACM,IAAI,CAACM,KAAK,CAAC,CAAC;IAC5C;;IAEAhB,QAAQ,CAAC;MAAEC,IAAI,EAAER,kBAAkB;MAAEc,OAAO,EAAEU;IAAa,CAAC,CAAC;EAC/D;AACF,CAAC;AACD,eAAepB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
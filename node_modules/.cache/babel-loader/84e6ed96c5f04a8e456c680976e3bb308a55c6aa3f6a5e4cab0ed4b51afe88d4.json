{"ast":null,"code":"import { VERIFY_OTP_REQUEST, VERIFY_OTP_FAILURE, VERIFY_OTP_SUCCESS } from \"./action_types\";\nimport axios from 'axios';\nconst verifyOtpAction = (email, otp) => async dispatch => {\n  try {\n    dispatch({\n      type: VERIFY_OTP_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    };\n    const response = await axios.post(\"http://localhost:1213/user/verify-otp\", {\n      email: email,\n      otp: otp\n    }, config);\n    dispatch({\n      type: VERIFY_OTP_SUCCESS,\n      payload: response\n    });\n    console.log(response);\n    return response; // You can return the response data if needed\n  } catch (error) {\n    console.log(\"Error response from server:\", error);\n    let errorMessage = \"An error occurred\"; // Default error message\n\n    if (error.response && error.response.data.error) {\n      errorMessage = error.response.data.error; // Use the error message from the server if available\n    }\n\n    dispatch({\n      type: VERIFY_OTP_FAILURE,\n      payload: errorMessage\n    });\n    throw error; // You can re-throw the error to handle it in your component\n  }\n};\n\nexport default verifyOtpAction;","map":{"version":3,"names":["VERIFY_OTP_REQUEST","VERIFY_OTP_FAILURE","VERIFY_OTP_SUCCESS","axios","verifyOtpAction","email","otp","dispatch","type","config","headers","response","post","payload","console","log","error","errorMessage","data"],"sources":["/Users/apple/Documents/Ecommerce/client/src/actions/verify_otp_action.js"],"sourcesContent":["import {\n    VERIFY_OTP_REQUEST,\n    VERIFY_OTP_FAILURE,\n    VERIFY_OTP_SUCCESS,\n  } from \"./action_types\";\n  import axios from 'axios';\n  \nconst verifyOtpAction = (email, otp) => async (dispatch) => {\n\n    try {\n      dispatch({ type: VERIFY_OTP_REQUEST });\n      const config = {\n        headers: {\n          'Content-type': 'application/json',\n        },\n      };\n  \n      const response = await axios.post(\"http://localhost:1213/user/verify-otp\", {\n        email: email,\n        otp: otp,\n      }, config);\n  \n      dispatch({ type: VERIFY_OTP_SUCCESS, payload: response });\n      console.log(response);\n      return response; // You can return the response data if needed\n    } catch (error) {\n      console.log(\"Error response from server:\", error);\n      let errorMessage = \"An error occurred\"; // Default error message\n  \n      if (error.response && error.response.data.error) {\n        errorMessage = error.response.data.error; // Use the error message from the server if available\n      }\n  \n      dispatch({ type: VERIFY_OTP_FAILURE, payload: errorMessage });\n      throw error; // You can re-throw the error to handle it in your component\n    }\n  };\n\nexport default verifyOtpAction;"],"mappings":"AAAA,SACIA,kBAAkB,EAClBC,kBAAkB,EAClBC,kBAAkB,QACb,gBAAgB;AACvB,OAAOC,KAAK,MAAM,OAAO;AAE3B,MAAMC,eAAe,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAK,MAAOC,QAAQ,IAAK;EAExD,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAER;IAAmB,CAAC,CAAC;IACtC,MAAMS,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC;IAED,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,uCAAuC,EAAE;MACzEP,KAAK,EAAEA,KAAK;MACZC,GAAG,EAAEA;IACP,CAAC,EAAEG,MAAM,CAAC;IAEVF,QAAQ,CAAC;MAAEC,IAAI,EAAEN,kBAAkB;MAAEW,OAAO,EAAEF;IAAS,CAAC,CAAC;IACzDG,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;IACrB,OAAOA,QAAQ,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdF,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEC,KAAK,CAAC;IACjD,IAAIC,YAAY,GAAG,mBAAmB,CAAC,CAAC;;IAExC,IAAID,KAAK,CAACL,QAAQ,IAAIK,KAAK,CAACL,QAAQ,CAACO,IAAI,CAACF,KAAK,EAAE;MAC/CC,YAAY,GAAGD,KAAK,CAACL,QAAQ,CAACO,IAAI,CAACF,KAAK,CAAC,CAAC;IAC5C;;IAEAT,QAAQ,CAAC;MAAEC,IAAI,EAAEP,kBAAkB;MAAEY,OAAO,EAAEI;IAAa,CAAC,CAAC;IAC7D,MAAMD,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAEH,eAAeZ,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}